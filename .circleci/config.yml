version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1 \
              jq
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76 \
              virtualenv
      - run:
          name: Run Tests
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
            mkdir test-results
            python -m pytest --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      # - restore_cache:
      #     keys:
      #       - v1-{{ .Branch }}
      #     paths:
      #       - /caches/app.tar
      # - run:
      #     name: Load Docker image layer cache
      #     command: |
      #       set +o pipefail
      #       docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      # - run:
      #     name: Save Docker image layer cache
      #     command: |
      #       mkdir -p /caches
      #       docker save -o /caches/app.tar app
      # - save_cache:
      #     key: v1-{{ .Branch }}-{{ epoch }}
      #     paths:
      #       - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              login="$(aws ecr get-login)"
              ${login}
              # Push the latest image (will become the ":latest")
              docker tag app "${ECR_ENDPOINT}:latest"
              docker push "${ECR_ENDPOINT}"
              # Tag the image with your build_number
              build_number=$(cat app/pkg_info.json| jq -r .version)
              docker tag app "${ECR_ENDPOINT}:${build_number}"
              # Push the tagged image 
              docker push "${ECR_ENDPOINT}:${build_number}"
            fi

